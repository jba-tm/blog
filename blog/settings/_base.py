"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import json
import dj_database_url
from pathlib import Path

from django.core.exceptions import ImproperlyConfigured
from django.utils.translation import ugettext_lazy as _

from ..apps.core.versioning import get_git_change_set_timestamp

PROJECT_NAME = 'blog'

with open(os.path.join(os.path.dirname(__file__), 'secrets.json'), 'r') as f:
    secrets = json.loads(f.read())


def get_secret(setting):
    """Get the secret variable or return explicit exception"""
    try:
        return secrets[setting]
    except KeyError:
        error_msg = f'Set the {setting} environment variable'
        raise ImproperlyConfigured(error_msg)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
PROJECT_DIR = Path(__file__).resolve().parent.parent
# PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# BASE_DIR = os.path.dirname(PROJECT_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    'home',
    'search',

    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail.core',
    'wagtail.api.v2',
    'wagtail.contrib.postgres_search',

    'modelcluster',
    'taggit',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Package applications
    'rest_framework',
    'axes',
    'weasyprint',

    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',

    # Custom applications
    'blog.apps.content',
    'blog.apps.core',
    'blog.apps.utils',
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'wagtail.contrib.redirects.middleware.RedirectMiddleware',

    'blog.apps.utils.middleware.OnlineNowMiddleware',

    # AxesMiddleware should be the last middleware in the MIDDLEWARE list.
    # It only formats user lockout messages and renders Axes lockout responses
    # on failed user authentication attempts from login views.
    # If you do not want Axes to override the authentication response
    # you can skip installing the middleware and use your own views.
    'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = PROJECT_NAME + '.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'home.middleware.get_menu_items',
                'blog.apps.content.middleware.last_contents',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # AxesBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesBackend',

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    # 'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = PROJECT_NAME + '.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    #
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'application',
    #     'USER': 'root',
    #     'PASSWORD': "",
    #     'HOST': "",
    #     'PORT': "",
    #     'OPTIONS': {
    #         'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
    #     }
    # }

    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': get_secret('DATABASE_NAME'),
        'USER': get_secret('DATABASE_USER'),
        'PASSWORD': get_secret('DATABASE_PASSWORD'),
        'HOST': get_secret('DATABASE_HOST'),
        'PORT': get_secret('DATABASE_PORT'),
    },
}

WAGTAILSEARCH_BACKENDS = {
    # 'default': {
    #     'BACKEND': 'wagtail.search.backends.db',
    # },

    'default': {
        'BACKEND': 'wagtail.contrib.postgres_search.backend',
        'AUTO_UPDATE': True,
        'ATOMIC_REBUILD': True,
    },

    # 'default': {
    #     'BACKEND': 'wagtail.search.backends.elasticsearch7',
    #     'URLS': ['http://localhost:9200'],
    #     'INDEX': 'wagtail',
    #     'TIMEOUT': 5,
    #     'OPTIONS': {},
    #     'INDEX_SETTINGS': {},
    # },

}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Asia/Ashgabat'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    'locale/',
    os.path.join(BASE_DIR, 'locale'),
    os.path.join(PROJECT_DIR, 'locale'),
]

LANGUAGES = WAGTAILADMIN_PERMITTED_LANGUAGES = [
    # ('tk', _('Turkmen')),
    ('en', _('English')),
    ('ru', _('Russian')),
]

# DATE_FORMAT = 'd.m.Y'
# TIME_FORMAT = 'G:i'
# DATETIME_FORMAT = 'd.m.Y H:i'
#
# DATETIME_INPUT_FORMATS = [
#     # '%d.%m.%Y %H:%M:%S',     # '25.10.2006 14:30:59'
#     # '%d.%m.%Y %H:%M:%S.%f',  # '25.10.2006 14:30:59.000200'
#     '%d.%m.%Y %H:%M',  # '25.10.2006 14:30'
#     # '%d.%m.%Y',              # '25.10.2006'
#     # '%d.%m.%y %H:%M:%S',     # '25.10.06 14:30:59'
#     # '%d.%m.%y %H:%M:%S.%f',  # '25.10.06 14:30:59.000200'
#     '%d.%m.%y %H:%M',  # '25.10.06 14:30'
#     # '%d.%m.%y',              # '25.10.06'
# ]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, 'static'),
    # os.path.join(BASE_DIR, PROJECT_NAME, 'static'),
]

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# Javascript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/3.1/ref/contrib/staticfiles/#manifeststaticfilesstorage
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
with open(os.path.join(PROJECT_DIR, 'settings', 'last_update.txt'), 'r') as f:
    timestamp = f.readline().strip()
STATIC_URL = f'/static/{timestamp}/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# AUTHENTICATION settings
LOGIN_URL = '/login/'

LOGIN_REDIRECT_URL = '/'

LOGOUT_REDIRECT_URL = 'login'

# ACCOUNT_AUTHENTICATION_METHOD = "username_email"
# ACCOUNT_CONFIRM_EMAIL_ON_GET = True
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
# ACCOUNT_LOGOUT_ON_GET = True
# ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
# ACCOUNT_LOGOUT_REDIRECT_URL = '/login/'
# ACCOUNT_PRESERVE_USERNAME_CASING = False
# ACCOUNT_SESSION_REMEMBER = True
# ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
# ACCOUNT_USERNAME_BLACKLIST = ["admin", "god"]
# ACCOUNT_USERNAME_MIN_LENGTH = 2

# Wagtail settings
WAGTAIL_SITE_NAME = "blog"

WAGTAIL_FRONTEND_LOGIN_URL = LOGIN_URL

WAGTAIL_FRONTEND_LOGIN_TEMPLATE = 'utils/login.html'

WAGTAIL_USER_EDIT_FORM = 'blog.apps.utils.forms.CustomUserEditForm'
WAGTAIL_USER_CREATION_FORM = 'blog.apps.utils.forms.CustomUserCreationForm'

# WAGTAIL_PASSWORD_RESET_ENABLED = False

# WAGTAIL_EMAIL_MANAGEMENT_ENABLED = False

# WAGTAIL_DATE_FORMAT = '%d.%m.%Y'
# WAGTAIL_DATETIME_FORMAT = '%d.%m.%Y %H:%M'

WAGTAILADMIN_RICH_TEXT_EDITORS = {
    'default': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': ['bold', 'italic', ]
        }
    },
}

WAGTAILADMIN_GLOBAL_PAGE_EDIT_LOCK = True

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
BASE_URL = 'http://blog.com'

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

SESSION_COOKIE_AGE = 5 * 60

SESSION_COOKIE_SAMESITE = 'Strict'

SESSION_SAVE_EVERY_REQUEST = True

# django-axes settings
SILENCED_SYSTEM_CHECKS = ['axes.W003']

AXES_ONLY_USER_FAILURES = True

# Logging settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'simple': {
            'format': '[%(asctime)s %(levelname)s: %(message)s',
            'datefmt': '%d.%m.%Y %H:%M:%S',
        }
    },
    'handlers': {
        'console_dev': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['require_debug_true'],
        },
        'console_prod': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'ERROR',
            'filters': ['require_debug_false'],
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/app.log'),
            'maxBytes': 1048576,
            'backupCount': 10,
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console_dev', 'console_prod'],
        },
        'django.server': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}

# Allauth settings
SITE_ID = 1

#
DATABASES['default'] = dj_database_url.config(conn_max_age=600, ssl_require=True)
